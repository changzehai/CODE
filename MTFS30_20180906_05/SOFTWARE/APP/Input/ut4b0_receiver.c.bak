/*****************************************************************************/
/* 文件名:    ut4b0_receiver.c                                               */
/* 描  述:    UT4B0接收机相关处理                                            */
/* 创  建:    2018-07-20 changzehai(DTT)                                     */
/* 更  新:    无                                                             */
/* Copyright 1998 - 2018 DTT. All Rights Reserved                            */
/*****************************************************************************/
#include "ut4b0_receiver.h"
#include "string_com.h"

/*-------------------------------*/
/* 变量定义                      */
/*-------------------------------*/


/*-------------------------------*/
/* 变量声明                      */
/*-------------------------------*/
extern satellite_info_t gsatellite_info; /* 卫星综合信息 */
extern recviver_info_t  grecviver_info;  /* 接收机信息   */
extern leap_forecast_t  gleap_forecast;  /* 闰秒预告     */
extern time_t           gtime;           /* 时间信息     */ 

/*-------------------------------*/
/* 函数声明                      */
/*-------------------------------*/
static void ut4b0_check_cmdhandler(INT8U *pdata);
static void ut4b0_gga_msg_parse(INT8U *pdata);
static void ut4b0_gsv_msg_parse(INT8U *pdata);
static void ut4b0_gpsbds_utc_msg_parse(INT8U *pdata);
static void ut4b0_gal_utc_msg_parse(INT8U *pdata);
static void get_leap_forecast(INT8U sat_type, INT32U wn, INT8U dn, INT8U now_leap, INT8U next_leap);
static void ut4b0_antenna_msg_parse(INT8U *pdata);




/* ut4b0接收机数据输出指令处理表 */
static cmdhandle_t ut4b0_cmdhandle[] =
{
	/* GGA信息 */
	{(INT8U *)"$GNGGA",      ut4b0_gga_msg_parse},
	{(INT8U *)"$GPGGA",      ut4b0_gga_msg_parse},
	{(INT8U *)"$BDGGA",      ut4b0_gga_msg_parse},
	{(INT8U *)"$GPSGGA",     ut4b0_gga_msg_parse},
	{(INT8U *)"$BDSGGA",     ut4b0_gga_msg_parse},
	{(INT8U *)"$GLOGGA",     ut4b0_gga_msg_parse},
	{(INT8U *)"$GALGGA",     ut4b0_gga_msg_parse},
	
	/* GSV信息 */
	{(INT8U *)"$GPGSV",      ut4b0_gsv_msg_parse},
	{(INT8U *)"$BDGSV",      ut4b0_gsv_msg_parse},
	{(INT8U *)"$GLGSV",      ut4b0_gsv_msg_parse},
	{(INT8U *)"$GAGSV",      ut4b0_gsv_msg_parse},	
	
	/* UTC信息 */
	{(INT8U *)"$GPSUTC",     ut4b0_gpsbds_utc_msg_parse},
	{(INT8U *)"$BDSUTC",     ut4b0_gpsbds_utc_msg_parse},
	{(INT8U *)"$GALUTC",     ut4b0_gal_utc_msg_parse},
	
	/* 天线状态 */
	{(INT8U *)"ANTENNA",     ut4b0_antenna_msg_parse},
	
};

/*****************************************************************************
 * 函  数:    ut4b0_receiver_init                                                           
 * 功  能:    ut4b0接收机初始化                                                                
 * 输  入:     *pdata: 卫星数据                         
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/  
void ut4b0_receiver_init(void)
{
     pps_info_t pps_info; /* 存放pps配置信息 */


    /* 设置ut4b0接收机工作模式 */
	  ut4b0_receiver_acmode_set(REV_ACMODE_ALL);
	  
    /* 设置ut4b0接收机输出的卫星语句 */
	  ut4b0_receiver_msg_set(REV_ACMODE_ALL);
	

	  
	  /* pps初始配置 */
	  memset(&pps_info, 0x00, sizeof(pps_info));
	  strcpy((char *)pps_info.en_switch, "ENABLE");  /* 使能 PPS 输出，且只有时间有效时输出 PPS 信号；当卫星失锁，接收机不定位时，无 PPS 信号输出。 */
	  strcpy((char *)pps_info.timeref, "GPS");      
	  strcpy((char *)pps_info.polatity, "POSITIVE"); /* 上升沿有效 */
      pps_info.width = 500000;                       /* 脉冲宽度为500毫秒 */	  
	  pps_info.period = 1000;                        /* pps周期为1秒      */ 
	  pps_info.rfdelay = 0;                          /* RF延迟0纳秒       */
	  pps_info.userdelay = 0;                        /* 用户延迟0纳秒     */
	  
	  /* 设置pps */
	  ut4b0_receiver_pps_set(&pps_info);
	  
	  
	
}

/*****************************************************************************
 * 函  数:    ut4b0_receiver_msg_set                                                           
 * 功  能:    设置ut4b0接收机输出的卫星语句                                                               
 * 输  入:    mode: 
			       REV_ACMODE_GPS: 单GPS定位
				   REV_ACMODE_BDS: 单BDS定位
				   REV_ACMODE_GLO: 单GLO定位
				   REV_ACMODE_GAL: 单GAL定位
				   REV_ACMODE_ALL: 多系统联合定位                        
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/ 
void ut4b0_receiver_msg_set(INT8U mode)
{
	INT8U buf[20] = {0};
	
	
    /* 禁止所有信息输出 */
	memset(buf, 0x00, sizeof(buf));
	strcpy((char *)buf, "unlog");
	usart_send(buf, 1); /* 使用串口1发送命令 */			     

	
	/* 判断工作模式 */
	switch(mode)
	{
	    case REV_ACMODE_GPS:    /* 单GPS定位 */
	        /* GPSGGA */
	        memset(buf, 0x00, sizeof(buf));
	        strcpy((char *)buf, "GPSGGA 1");
	        usart_send(buf, 1); /* 使用串口1发送命令 */		
            
            /* GPSUTC */
	        memset(buf, 0x00, sizeof(buf));
	        strcpy((char *)buf, "GPSUTC 1");
	        usart_send(buf, 1); /* 使用串口1发送命令 */				
		    break;
			
		case REV_ACMODE_BDS:    /* 单BDS定位 */
			/* BDSGGA */
			memset(buf, 0x00, sizeof(buf));
			strcpy((char *)buf, "BDSGGA 1");
			usart_send(buf, 1); /* 使用串口1发送命令 */
			
            /* BDSUTC */
	        memset(buf, 0x00, sizeof(buf));
	        strcpy((char *)buf, "BDSUTC 1");
	        usart_send(buf, 1); /* 使用串口1发送命令 */	
		    break;
			
		case REV_ACMODE_GLO:    /* 单GLO定位 */
			/* GLOGGA */
			memset(buf, 0x00, sizeof(buf));
			strcpy((char *)buf, "GLOGGA 1");
			usart_send(buf, 1); /* 使用串口1发送命令 */			    
		    break;
			
		case REV_ACMODE_GAL:    /* 单GAL定位 */
			/* GALGGA */
			memset(buf, 0x00, sizeof(buf));
			strcpy((char *)buf, "GALGGA 1");
			usart_send(buf, 1); /* 使用串口1发送命令 */	

            /* GALUTC */
	        memset(buf, 0x00, sizeof(buf));
	        strcpy((char *)buf, "GALUTC 1");
	        usart_send(buf, 1); /* 使用串口1发送命令 */				
		    break;
		
		case REV_ACMODE_ALL:    /* 多系统联合定位 */
			/* GNGGA */
			memset(buf, 0x00, sizeof(buf));
			strcpy((char *)buf, "GNGGA 1");
			usart_send(buf, 1); /* 使用串口1发送命令 */
			
            /* GPSUTC(多系统联合输出时以GPS UTC时间为准) */ 
	        memset(buf, 0x00, sizeof(buf));
	        strcpy((char *)buf, "GPSUTC 1");
	        usart_send(buf, 1); /* 使用串口1发送命令 */				
		    break;			
		
		default:
#ifdef TODO
		    MTFS30_ERROR("接收机工作模式(%d)有误", mode);
#endif			
		    break;
		}
	
    /* GPGSV */
	memset(buf, 0x00, sizeof(buf));
	strcpy((char *)buf, "GPGSV 1");
	usart_send(buf, 1); /* 使用串口1发送命令 */		
	
	/* ANTENNA */
	memset(buf, 0x00, sizeof(buf));
	strcpy((char *)buf, "ANTENNA 1");
	usart_send(buf, 1); /* 使用串口1发送命令 */		
	
	
}

/*****************************************************************************
 * 函  数:    ut4b0_receiver_acmode_set                                                           
 * 功  能:    设置ut4b0接收机工作模式                                                              
 * 输  入:    mode: 
			       REV_ACMODE_GPS: 单GPS定位
				   REV_ACMODE_BDS: 单BDS定位
				   REV_ACMODE_GLO: 单GLO定位
				   REV_ACMODE_GAL: 单GAL定位
				   REV_ACMODE_ALL: 多系统联合定位                        
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/ 
void ut4b0_receiver_acmode_set(INT8U mode)
{
    INT8U buf[20] = {0};


	/* 判断接收机工作模式 */
    switch(mode)
	{
	    case REV_ACMODE_GPS:    /* 单GPS定位 */	
        			
			/* 禁用BDS */
			memset(buf, 0x00, sizeof(buf));
            strcpy((char *)buf, "MASK BDS");         
            usart_send(buf, 1); /* 使用串口1发送命令 */
				
            /* 禁用GLO */
			memset(buf, 0x00, sizeof(buf));
            strcpy((char *)buf, "MASK GLO");         
            usart_send(buf, 1); /* 使用串口1发送命令 */		

            /* 禁用GAL */
			memset(buf, 0x00, sizeof(buf));
            strcpy((char *)buf, "MASK GAL");         
            usart_send(buf, 1); /* 使用串口1发送命令 */	

            /* 启用GPS */
			memset(buf, 0x00, sizeof(buf));
            strcpy((char *)buf, "UNMASK GPS");         
            usart_send(buf, 1); /* 使用串口1发送命令 */				
		    break;
			
		case REV_ACMODE_BDS:    /* 单BDS定位 */
			/* 禁用GPS */
			memset(buf, 0x00, sizeof(buf));
            strcpy((char *)buf, "MASK GPS");         
            usart_send(buf, 1); /* 使用串口1发送命令 */
				
            /* 禁用GLO */
			memset(buf, 0x00, sizeof(buf));
            strcpy((char *)buf, "MASK GLO");         
            usart_send(buf, 1); /* 使用串口1发送命令 */		

            /* 禁用GAL */
			memset(buf, 0x00, sizeof(buf));
            strcpy((char *)buf, "MASK GAL");         
            usart_send(buf, 1); /* 使用串口1发送命令 */	

            /* 启用GPS */
			memset(buf, 0x00, sizeof(buf));
            strcpy((char *)buf, "UNMASK BDS");         
            usart_send(buf, 1); /* 使用串口1发送命令 */	
		     break;
			 
		case REV_ACMODE_GLO:    /* 单GLO定位 */
			/* 禁用GPS */
			memset(buf, 0x00, sizeof(buf));
            strcpy((char *)buf, "MASK GPS");         
            usart_send(buf, 1); /* 使用串口1发送命令 */
				
            /* 禁用BDS */
			memset(buf, 0x00, sizeof(buf));
            strcpy((char *)buf, "MASK BDS");         
            usart_send(buf, 1); /* 使用串口1发送命令 */		

            /* 禁用GAL */
			memset(buf, 0x00, sizeof(buf));
            strcpy((char *)buf, "MASK GAL");         
            usart_send(buf, 1); /* 使用串口1发送命令 */	

            /* 启用GLO */
			memset(buf, 0x00, sizeof(buf));
            strcpy((char *)buf, "UNMASK GLO");         
            usart_send(buf, 1); /* 使用串口1发送命令 */	
		     break;   
			 
		case REV_ACMODE_GAL:    /* 单GAL定位 */
			/* 禁用GPS */
			memset(buf, 0x00, sizeof(buf));
            strcpy((char *)buf, "MASK GPS");         
            usart_send(buf, 1); /* 使用串口1发送命令 */
				
            /* 禁用BDS */
			memset(buf, 0x00, sizeof(buf));
            strcpy((char *)buf, "MASK BDS");         
            usart_send(buf, 1); /* 使用串口1发送命令 */		

            /* 禁用GLO */
			memset(buf, 0x00, sizeof(buf));
            strcpy((char *)buf, "MASK GLO");         
            usart_send(buf, 1); /* 使用串口1发送命令 */	

            /* 启用GAL */
			memset(buf, 0x00, sizeof(buf));
            strcpy((char *)buf, "UNMASK GAL");         
            usart_send(buf, 1); /* 使用串口1发送命令 */	
		     break;
			 
		case REV_ACMODE_ALL:   /* 多系统联合定位  */
			/* 启用GPS */
			memset(buf, 0x00, sizeof(buf));
            strcpy((char *)buf, "UNMASK GPS");         
            usart_send(buf, 1); /* 使用串口1发送命令 */
				
            /* 启用BDS */
			memset(buf, 0x00, sizeof(buf));
            strcpy((char *)buf, "UNMASK BDS");         
            usart_send(buf, 1); /* 使用串口1发送命令 */		

            /* 启用GLO */
			memset(buf, 0x00, sizeof(buf));
            strcpy((char *)buf, "UNMASK GLO");         
            usart_send(buf, 1); /* 使用串口1发送命令 */	

            /* 启用GAL */
			memset(buf, 0x00, sizeof(buf));
            strcpy((char *)buf, "UNMASK GAL");         
            usart_send(buf, 1); /* 使用串口1发送命令 */	
		     break;
			 
	    default:
#ifdef TODO
		    MTFS30_ERROR("接收机工作模式(%d)有误", mode);
#endif	
		     break;
	}


}


/*****************************************************************************
 * 函  数:    ut4b0_receiver_msg_parser                                                           
 * 功  能:    解析ut4b0接收机输出的卫星数据                                                                 
 * 输  入:     *pdata: 卫星数据                         
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/  
 void ut4b0_receiver_msg_parser(INT8U *pdata)
 {
	 INT8U *p = pdata;   /* 指向每个字符         */
	 INT8U *pmsg = NULL; /* 指向每条数据输出指令 */

	 
	 while(*p != '\0')
	 {
		 /* $表示一条数据输出指令开始 */
		 if (*p == '$')
		 {
			 /* 截取出该条数据指令 */
			 pmsg  = (INT8U*)strtok((char *)p, "*");
			 
			 /* 查找并执行该条数据指令的解析函数 */
			 ut4b0_check_cmdhandler(pmsg);
			 
			 /* 跳过该条指令 */
			 p = p + strlen((char *)pmsg);
			 			 
		 }
		 
		p++; 
	 }
	 
 }
 
/*****************************************************************************
 * 函  数:    ut4b0_check_cmdhandler                                                           
 * 功  能:    查找UT4B0接收机数据输出指令的解析函数并调用                                                              
 * 输  入:     *pdata: 卫星数据                         
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/  
static void ut4b0_check_cmdhandler(INT8U *pdata)
 {
	INT8U i = 0;
  	INT8U cnt = 0;        /* 命令表中命令条数 */
  
	
	/* 计算命令条数 */
	cnt = sizeof(ut4b0_cmdhandle) / sizeof(ut4b0_cmdhandle[0]);
	
	/* 查找指定命令 */
	for (i = 0; i < cnt; i++)
	{
		if(strncmp((char *)ut4b0_cmdhandle[i].cmd, (char*)pdata, strlen((char *)ut4b0_cmdhandle[i].cmd)) == 0)
		{
			/* 调用解析函数 */
			ut4b0_cmdhandle[i].cmd_fun(pdata);
            return;
		}
	} 
	
#ifdef TODO
    INT8U *pcmd = pdata; 
    
	/* 取出输出指令 */
    pcmd = strtok(pdata, ",");
    MTFS30_ERROR("输出指令(%s)有误", pcmd);
#endif	
	 	 
}
 
 /*****************************************************************************
 * 函  数:    ut4b0_gga_msg_parse                                                           
 * 功  能:    解析UT4B0接收机输出GGA信息                                                                
 * 输  入:    *pdata: XXXGGA信息                          
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/  
static void ut4b0_gga_msg_parse(INT8U *pdata)
 {
    INT8U *p = NULL;  
	
 
	/* GGA头(不做处理) */
	p = (INT8U *)strtok((char *)pdata, ",");
	
	/* UTC时间 */
	p = (INT8U *)strtok(NULL, ",");
	memset(gtime.hms, 0x00, sizeof(gtime.hms));
	strcpy((char *)gtime.hms, (const char *)p);
	
	
	/* 纬度 */
    p = (INT8U *)strtok(NULL, ",");		
	memset(gsatellite_info.location.lat, 0x00, sizeof(gsatellite_info.location.lat));
	strcpy((char *)gsatellite_info.location.lat, (const char *)p);
	
	/* 纬度方向 */
	p = (INT8U *)strtok(NULL, ",");
	gsatellite_info.location.latdir = *p;
	
	/* 经度 */
	p = (INT8U *)strtok(NULL, ",");
	memset(gsatellite_info.location.lon, 0x00, sizeof(gsatellite_info.location.lon));
	strcpy((char *)gsatellite_info.location.lon, (const char *)p);
	
	/* 经度方向 */
	p = (INT8U *)strtok(NULL, ",");
	gsatellite_info.location.londir = *p;
	
	/* GPS质量指示符(不做处理) */
	p = (INT8U *)strtok(NULL, ",");

    /* 使用中的卫星数 */
	p = (INT8U *)strtok(NULL, ",");
	gsatellite_info.use_sats = *p;
	
	/* 水平精度因子(不做处理) */
	p = (INT8U *)strtok(NULL, ",");
		
	/* 海拔 */
	p = (INT8U *)strtok(NULL, ",");
	memset(gsatellite_info.location.alt, 0x00, sizeof(gsatellite_info.location.alt));
	strcpy((char *)gsatellite_info.location.alt, (const char *)p);		
	
	/* 海拔之后的其他参数不做处理 */	 
 

 }
 

/*****************************************************************************
 * 函  数:    ut4b0_msg_parse                                                           
 * 功  能:    解析UT4B0接收机输出GSV信息                                                                 
 * 输  入:    *pdata: GSV信息;                       
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/  
static void ut4b0_gsv_msg_parse(INT8U *pdata)
{
	INT8U  i;
	INT8U  *p = NULL;
    INT8U  gsv_msg_total = 0; /* 信息总数            */
	INT8U  gsv_msg = 0;       /* 信息数              */
	INT8U  gsv_amount_stas;   /* 可见的卫星总数      */
	static INT8U gps_cnt = 0; /* 已解析的GPS卫星颗数 */
	static INT8U bds_cnt = 0; /* 已解析的BDS卫星颗数 */
	static INT8U glo_cnt = 0; /* 已解析的GLO卫星颗数 */
	static INT8U gal_cnt = 0; /* 已解析的GAL卫星颗数 */
	satellite_sta_t satellite_sta[4]; /* 用于保存每条GSV信息中包含的4颗卫星状态数据 */	
	
	
	/* GSV头(不做处理) */
	p = (INT8U *)strtok((char *)pdata, ",");
	
	/* 信息总数 */
	p = (INT8U *)strtok(NULL, ",");
	gsv_msg_total = *(INT8U*)p;
	
	
	/* 信息数 */
	p = (INT8U *)strtok(NULL, ",");
	gsv_msg = *(INT8U*)p;
	
	/* 可见的卫星总数 */
	p = (INT8U *)strtok(NULL, ",");
	gsv_amount_stas = *(INT8U*)p;
	
	
	/* 解析一条GSV信息中包含的卫星状态信息 */
	for(i = 0; i < gsv_msg; i++)
	{
		/* 卫星PRN编号 */
		p = (INT8U *)strtok(NULL, ",");
		satellite_sta[i].prn = *(INT8U*)p;
		
		/* 仰角 */
		p = (INT8U *)strtok(NULL, ",");
		satellite_sta[i].elev = *(INT8U*)p;
		
		/* 真北方位角(不做处理) */
		p = (INT8U *)strtok(NULL, ",");
		
		/* 信噪比 */
		p = (INT8U *)strtok(NULL, ",");
		satellite_sta[i].snr = *(INT8U*)p;
			
	}
	

    /* GPS */
    if (strncmp((char *)pdata, "GPGSV", 5) == 0)
	{
		/* 可见的GPS卫星总数 */
		gsatellite_info.gps_amount_sats = gsv_amount_stas;
		
		/* 拷贝本条GSV信息中的卫星状态数据 */
		memcpy(&gsatellite_info.gps_status[gps_cnt], satellite_sta, sizeof(satellite_sta_t) * gsv_msg);
		
		
        /* 已解析完所有GPS卫星状态信息 */			
		if (gsv_msg == gsv_msg_total)
		{
		    gps_cnt = 0;
		} 
		else
		{
			gps_cnt += gsv_msg; /* 已解析的GPS卫星颗数更新，每条GSV信息最多包含4颗卫星 */
		}		
	}
	/* BDS */
	else if(strncmp((char *)pdata, "BDGSV", 5) == 0)
	{
		/* 可见的BDS卫星总数 */
		gsatellite_info.bds_amount_sats = gsv_amount_stas;
		
		/* 拷贝本条GSV信息中的卫星状态数据 */
		memcpy(&gsatellite_info.bds_status[bds_cnt], satellite_sta, sizeof(satellite_sta_t) * gsv_msg);
		
		/* 已解析完所有BDS卫星状态信息 */
		if (gsv_msg == gsv_msg_total)
		{
		    bds_cnt = 0;	
		} 
		else
		{
			bds_cnt += gsv_msg; /* 已解析的BDS卫星颗数更新，每条GSV信息最多包含4颗卫星 */
		}		
	}
	/* GLO */
	else if(strncmp((char *)pdata, "GLGSV", 5) == 0)
	{
		/* 可见的GLO卫星总数 */
		gsatellite_info.glo_amount_sats = gsv_amount_stas;
		
		/* 拷贝本条GSV信息中的卫星状态数据 */
		memcpy(&gsatellite_info.glo_status[glo_cnt], satellite_sta, sizeof(satellite_sta_t) * gsv_msg);
		
		/* 已解析完所有GLO卫星状态信息 */
		if (gsv_msg == gsv_msg_total)
		{
		    glo_cnt = 0;	
		} 
		else
		{
			glo_cnt += gsv_msg; /* 已解析的GLO卫星颗数更新，每条GSV信息最多包含4颗卫星 */
		}		
	}
	/* GAL */
	else if(strncmp((char *)pdata, "GAGSV", 5) == 0)
	{
		/* 可见的GAL卫星总数 */
		gsatellite_info.gal_amount_sats = gsv_amount_stas;

		/* 拷贝本条GSV信息中的卫星状态数据 */
		memcpy(&gsatellite_info.gal_status[gal_cnt], satellite_sta, sizeof(satellite_sta_t) * gsv_msg);
		
		/* 已解析完所有GAL卫星状态信息 */
		if (gsv_msg == gsv_msg_total)
		{
		    gal_cnt = 0;	
		} 
		else
		{
			gal_cnt += gsv_msg; /* 已解析的GAL卫星颗数更新，每条GSV信息最多包含4颗卫星 */
		}		
	}
	else
	{
		
	}


}

/*****************************************************************************
 * 函  数:    ut4b0_gpsbds_utc_msg_parse                                                           
 * 功  能:    解析UT4B0接收机输出的UTC信息并生成闰秒预告(GPS/BDS卫星)                                                                 
 * 输  入:    *pdata: UTC信息;                       
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/
 static void ut4b0_gpsbds_utc_msg_parse(INT8U *pdata)
 {
	 INT8U i;
	 INT8U cnt;
	 INT8U *p;
	 INT32U wn;         /* 新的闰秒生效的周计数             */
	 INT8U  dn;         /* 新的闰秒生效的周内日计数         */
     INT8U now_leap;    /* 当前闰秒                         */
     INT8U next_leap;   /* 新的闰秒                         */
	 INT8U i_wn;        /* 新的闰秒生效的周计数开始位置     */
	 INT8U i_dn;        /* 新的闰秒生效的周内日计数开始位置 */
	 INT8U i_now_leap;  /* 当前闰秒开始位置                 */
	 INT8U i_next_leap; /* 下次闰秒开始位置                 */
	 
	
    /* 初始化 */
    i = 0;
    cnt = 0;	
	i_wn = 0;
	i_dn = 0;
	i_now_leap = 0;
	i_next_leap = 0;
	 
	while(pdata[i++] != '\0')
	{
		if(pdata[i] == ',')
		{
			cnt++;
			switch(cnt)
			{
				case 5:    /* 新的闰秒生效的周计数开始位置     */
				     i_wn = i + 1;
				    break;
					
				case 6:    /* 新的闰秒生效的周内日计数开始位置 */
				    i_dn = i + 1;
				    break;
					
				case 7:    /* 当前闰秒开始位置                 */
				    i_now_leap = i + 1;
				    break;
					
				case 8:    /* 下次闰秒开始位置                 */
				    i_next_leap = i + 1;
				    break;
					
				default:
				    break;
                
			}
		}
	}

	/* 新的闰秒生效的周计数 */
	if (pdata[i_wn] != ',')
	{
		p = (INT8U *)strtok((char *)&p[i_wn], ",");
		wn = str_to_int32u(p);
		
    }
	
	/* 新的闰秒生效的周内日计数 */
	if (pdata[i_dn] != ',')
	{
		dn = pdata[i_dn];
	}
	 
	/* 当前闰秒 */
	if (pdata[i_now_leap] != ',') 
	{
		p = (INT8U *)strtok((char *)&p[i_now_leap], ",");
		now_leap = *p;
	}
	
    /* 新的闰秒 */	
	if (pdata[i_next_leap] != ',') 
	{
		p = (INT8U *)strtok((char *)&p[i_next_leap], ",");
		next_leap = *p;
	}
	
	
	if (strncmp((char *)pdata, "GPSUTC", 6) == 0)
	{
		/* 生成闰秒预告 */
		get_leap_forecast(SAT_TYPE_GPS, wn, dn, now_leap, next_leap);
	}
	else if (strncmp((char *)pdata, "BDSUTC", 6) == 0)
	{
		/* 生成闰秒预告 */
		get_leap_forecast(SAT_TYPE_BDS, wn, dn, now_leap, next_leap);		
	}
	
     	
	
 }
 
/*****************************************************************************
 * 函  数:    ut4b0_antenna_msg_parse                                                           
 * 功  能:    解析UT4B0接收机输出的ANTENNA信息                                                                 
 * 输  入:    *pdata: ANTENNA信息;                       
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/
static void ut4b0_antenna_msg_parse(INT8U *pdata)
{
	 INT8U i;
	 INT8U cnt;
	 INT8U i_status1; /* 天线1状态信息的位置 */
	 INT8U i_status2; /* 天线2状态信息的位置 */
	 INT8U i_status3; /* 天线3状态信息的位置 */
	 
	 
	/* 初始化 */
	i = 0;
	cnt = 0;
	i_status1 = 0;
	i_status2 = 0;
	i_status3 = 0;
	 
	while(pdata[i++] != '\0')
	{
		if(pdata[i] == ' ')
		{
			cnt++;
			switch(cnt)
			{
			    case 10:    /* 天线1状态信息的位置 */
				    i_status1 = i + 1;
				    break;
					
				case 11:    /* 天线2状态信息的位置 */
				    i_status2 = i + 1;
				    break;
					
				case 12:    /* 天线3状态信息的位置 */ 
				    i_status3 = i + 1;
				    break;
			
			}
			
		}

        /* 天线1状态 */
        if (strncmp(&pdata[i_status1], "ON", 2))
		{
		    
		}
		else if(strncmp(&pdata[i_status1], "OFF", 3))
		{
		
		}

}
/*****************************************************************************
 * 函  数:    ut4b0_gpsbds_utc_msg_parse                                                           
 * 功  能:    解析UT4B0接收机输出的UTC信息并生成闰秒预告(GPS/BDS卫星)                                                                 
 * 输  入:    *pdata: UTC信息;                       
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/
static void ut4b0_gal_utc_msg_parse(INT8U *pdata)
{


}

 /*****************************************************************************
 * 函  数:    get_leap_forecast                                                           
 * 功  能:    生成闰秒预告                                                                 
 * 输  入:    sat_type  : 卫星类型
              wn        ：新的闰秒生效的周计数 
			        dn        ：新的闰秒生效的周内日计数
			        now_leap  ：当前闰秒
			        next_leap ：下次闰秒
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/
 static void get_leap_forecast(INT8U sat_type, INT32U wn, INT8U dn, INT8U now_leap, INT8U next_leap)
 {
	 
	 INT32U year;   /* 新的闰秒发生年 */ 
	 INT8U  mon;    /* 新的闰秒发生月 */
	 INT8U  day;    /* 新的闰秒发生日 */
	 INT32U days;   /* 新的闰秒发生日距离起始历元的总天数 */
	 INT8U  mon_days[12] ={31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; /* 每月天数 */
	 
	 switch(sat_type)
	 {
		 case SAT_TYPE_GPS:    /* GPS卫星 */
		 
		     break;
			 
		 case SAT_TYPE_BDS:    /* BDS卫星 */
		     year = 2006; /* BDS时间起始年 */      
			 mon = 1;     /* BDS时间起始月 */    
			 day = 1;     /* BDS时间起始日 */
		     break;
	 }
	 
	 
     /*-------------------------------*/
     /* 计算新的闰秒发生的年月日      */
     /*-------------------------------*/	 
	 
	 /* 新的闰秒发生日距离起始历元的总天数 */
	 days = wn * 7 + dn + day;
	 
	 while(days > mon_days[mon-1])
	 {
	 
		 /* 天数超过当月的总天数，则进入下一个月 */
		 days -= mon_days[mon-1];
		 mon++;
		 
		 /* 超过12月进入下一年 */
		 if (mon == 13)
		 {
			 year++;
			 
			 /* 判定闰年还是平年 */
			 if ((year % 400 == 0) || (year % 100 != 0 && year % 4 == 0))
			 {
				 mon_days[1] = 29; /* 闰年的2月为29天 */
			 }
			 else 
			 {
				 mon_days[1] = 28; /* 平年的2月为28天 */
			 }
			 
			 mon = 1; /* 新的一年，月份重新从1月开始 */
		 }

		 
	 }
	 
	 /* 新的闰秒发生日 */
	 day = days; 
	 
	 
     /*-------------------------------*/
     /* 生成闰秒预告                  */
     /*-------------------------------*/	

     /* 初始化 */
     memset(&gleap_forecast, 0x00, sizeof(gleap_forecast));	 
	 /* 新的闰秒发生年 */
	 sprintf((char *)gleap_forecast.year, "%d", year);
	 /* 新的闰秒发生月 */
	 sprintf((char *)gleap_forecast.mon, "%d", mon);
	 /* 新的闰秒发生日 */
	 sprintf((char *)gleap_forecast.day, "%d", day);
	 /* 新的闰秒值 */
	 gleap_forecast.next_leap = next_leap;
	 /* 正/负闰秒 */
	 gleap_forecast.sign = next_leap - now_leap;
	 
	 /* 闰秒发生时分秒 */
	 if (gleap_forecast.sign > 0)/* 正闰秒 */
	 {
		 sprintf((char *)gleap_forecast.hms, "%s", "235960"); /* 正闰秒发生时间为: 23:59:60 */
	 }
	 else
	 {
		 sprintf((char *)gleap_forecast.hms, "%s", "235958"); /* 正闰秒发生时间为: 23:59:58 */
	 }
	 
 }
 
 


/*****************************************************************************
 * 函  数:    ut4b0_receiver_pps_set                                                          
 * 功  能:    pps配置                                                                 
 * 输  入:    *pps_info: pps配置信息                         
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/
void ut4b0_receiver_pps_set(pps_info_t *pps_info)
{
    INT8U buf[128] = {0};


    /* 做成pps配置命令，校验码暂时用00代替 */
    sprintf((char *)buf, "CONFIG PPS %s %s %s %d %d %d %d*00\r\n",
            pps_info->en_switch, pps_info->timeref, pps_info->polatity,
            pps_info->width, pps_info->period, pps_info->rfdelay, pps_info->userdelay);
			

    /* 使用串口1发送命令 */
#ifdef TODO 
    usart_1_send(buf, strlen((char*)buf));
#endif	

}



