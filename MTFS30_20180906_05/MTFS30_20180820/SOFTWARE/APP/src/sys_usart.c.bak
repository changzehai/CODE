/*****************************************************************************/
/* 文件名:    sys_usart.c                                                 */
/* 描  述:    串口相关处理                                                   */
/* 创  建:    2018-07-20 changzehai(DTT)                                     */
/* 更  新:    无                                                             */
/* Copyright 1998 - 2018 DTT. All Rights Reserved                            */
/*****************************************************************************/
#include "sys_usart.h"



#ifdef TODO
/*-------------------------------*/
/* 变量定义                      */
/*-------------------------------*/
u8 gUSART1_tx_buf[USART1_BUF_SIZE]; /* 串口1发送缓冲区 */
u8 gUSART2_tx_buf[USART2_BUF_SIZE]; /* 串口2发送缓冲区 */
u8 gUSART1_rx_buf[USART1_BUF_SIZE]; /* 串口1接收缓冲区 */
u8 gUSART2_rx_buf[USART2_BUF_SIZE]; /* 串口2接收缓冲区 */




/*-------------------------------*/
/* 变量声明                      */
/*-------------------------------*/
extern OS_EVENT  *gpSem; /* 信号量 */
extern OS_EVENT  *gpUSART1_MsgQeue; /* 存放串口1接收数据的消息队列 */
extern OS_EVENT  *gpUSART2_MsgQeue; /* 存放串口2接收数据的消息队列 */


/*-------------------------------*/
/* 函数声明                      */
/*-------------------------------*/
static void sys_rcc_configuration(void);
static void sys_gpio_configuration(void);
static void sys_nvic_configuration(void);
static void sys_usart_configuration(void);
static void sys_dma_configuration(void);
static void sys_usart1_send(uint8_t *ptr, uint16_t size);
static void sys_usart2_send(uint8_t *ptr, uint16_t size);
static void sys_usart3_send(uint8_t *ptr, uint16_t size);

/*****************************************************************************
 * 函  数:    sys_rcc_configuration                                                          
 * 功  能:    配置串口时钟、DMA时钟和GPIO时钟                                                                  
 * 输  入:    无                          
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/
static void sys_rcc_configuration(void)
{
	/* GPIO时间 */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | 
			RCC_APB2Periph_AFIO, ENABLE);
	/* DMA1时钟 */						   
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);  						
	/* USART1时钟 */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);					
	/* USART2时钟和USART3时钟 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2|RCC_APB1Periph_USART3, ENABLE);
}



/*****************************************************************************
 * 函  数:    sys_gpio_configuration                                                          
 * 功  能:    配置串口1、串口2、串口3的配置GPIO引脚模式                                                                  
 * 输  入:    无                          
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/
static void sys_gpio_configuration(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;


	/* USART1:
	 * 将USART1 Tx的GPIO_PA9 配置为推挽复用模式
	 * 将USART1 Rx的GPIO_PA10配置为浮空输入模式
	 */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;       /* 推挽复用模式 */
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; /* 浮空输入模式 */
	GPIO_Init(GPIOA, &GPIO_InitStructure);


	/* USART2:		
	 * 将USART2 Tx的GPIO_PA2 配置为推挽复用模式
	 * 将USART2 Rx的GPIO_PA3 配置为浮空输入模式
	 */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;       /* 推挽复用模式 */
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; /* 浮空输入模式 */
	GPIO_Init(GPIOA, &GPIO_InitStructure);


	/* UASRT3:	
	 * 将USART3 Tx的GPIO_PB10配置为推挽复用模式
	 * 将USART2 Rx的GPIO_PB11配置为浮空输入模式
	 */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;       /* 推挽复用模式 */
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; /* 浮空输入模式 */
	GPIO_Init(GPIOB, &GPIO_InitStructure);
}



/*****************************************************************************
 * 函  数:    sys_nvic_configuration                                                          
 * 功  能:    配置NVIC中断优先级                                                                  
 * 输  入:    无                          
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/
static void sys_nvic_configuration(void)
{
	NVIC_InitTypeDef NVIC_InitStructure;




	/* 使能串口1中断 */
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

	/* 使能串口2中断 */
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

	/* 使能串口3中断 */
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

	/* 使能DMA Channel5中断 */
	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel5_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

	/*能DMA Channel5中断 */
	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel6_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
}



/*****************************************************************************
 * 函  数:    sys_usart_configuration                                                          
 * 功  能:    配置串口工作参数                                                                  
 * 输  入:    无                          
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/
static void sys_usart_configuration(void)
{
	USART_InitTypeDef USART_InitStructure;

	/* 配置USART1参数
	   - BaudRate = 115200 baud
	   - Word Length = 8 Bits
	   - One Stop Bit
	   - No parity
	   - Hardware flow control disabled (RTS and CTS signals)
	   - Receive and transmit enabled
	 */
	USART_InitStructure.USART_BaudRate = 115200;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	USART_Init(USART1, &USART_InitStructure);

	USART_ClearFlag(USART1, USART_FLAG_IDLE);   	/* 清除空闲中断标志    */
	USART_ClearFlag(USART1, USART_FLAG_TC);			/* 清除发送中断标志    */
	USART_ITConfig(USART1, USART_IT_IDLE, ENABLE); 	/* 配置USART1空闲中断  */
	USART_Cmd(USART1, ENABLE); 						/* 使能USART1,配置完毕 */


	/* 配置USART2参数
	   - BaudRate = 9600 baud
	   - Word Length = 8 Bits
	   - One Stop Bit
	   - No parity
	   - Hardware flow control disabled (RTS and CTS signals)
	   - Receive and transmit enabled
	 */
	USART_InitStructure.USART_BaudRate = 9600;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	USART_Init(USART2, &USART_InitStructure);

	USART_ClearFlag(USART2, USART_FLAG_IDLE);   	/* 清除空闲中断标志    */
	USART_ClearFlag(USART2, USART_FLAG_TC);			/* 清除发送中断标志    */
	USART_ITConfig(USART2, USART_IT_IDLE, ENABLE);  /* 配置USART2空闲中断  */
	USART_Cmd(USART2, ENABLE);						/* 使能USART2,配置完毕 */


	/* 配置USART3参数
	   - BaudRate = 9600 baud
	   - Word Length = 9 Bits
	   - One Stop Bit
	   - No parity
	   - Hardware flow control disabled (RTS and CTS signals)
	   - Receive and transmit enabled
	 */
	USART_InitStructure.USART_BaudRate = 9600;
	USART_InitStructure.USART_WordLength = USART_WordLength_9b;				
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	USART_Init(USART3, &USART_InitStructure);

	USART_ClearFlag(USART3, USART_FLAG_TC);			/* 清除发送中断标志    */
	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);	/* 配置USART3接收中断  */
	USART_Cmd(USART3, ENABLE);						/* 使能USART3,配置完毕 */	
}



/*****************************************************************************
 * 函  数:    sys_dma_configuration                                                          
 * 功  能:    配置串口DMA工作参数                                                                  
 * 输  入:    无                          
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/
static void sys_dma_configuration(void)
{
	DMA_InitTypeDef DMA_InitStructure;



	/*-------------------------------*/
	/* USART1_Rx                     */
	/*-------------------------------*/
	DMA_DeInit(DMA1_Channel5); 												/* 将DMA的通道3存器重设为缺省值          */
	DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&USART1->DR;			/* 外设的基地址为串口1接受发送数据存储器 */
	DMA_InitStructure.DMA_MemoryBaseAddr = (u32)USART1_rx_buf;				/* 内存基地址                            */
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;						/* 传输方向：外设==>>内存                */
	DMA_InitStructure.DMA_BufferSize = USART1_BUF_SIZE;						/* 传输数据大小                          */
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;		/* 不使能外设地址增量模式                */
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;					/* 内存地址为增量模式                    */
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;	/* 传输数据宽度：8bit                    */
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;			/* 传输数据宽度：8bit                    */
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;							/* 工作模式：正常模式，只收一次          */
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;							/* 不使能内存到内存拷贝模式              */
	DMA_Init(DMA1_Channel5, &DMA_InitStructure);


	/* Enable USART1 DMA RX request */
	USART_DMACmd(USART1, USART_DMAReq_Rx, ENABLE);
	DMA_Cmd(DMA1_Channel5, ENABLE);


	/*-------------------------------*/
	/* USART2_Rx                     */
	/*-------------------------------*/
	DMA_DeInit(DMA1_Channel6); 												/* 将DMA的通道3存器重设为缺省值    */
	DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&USART2->DR;			/* 外设的基地址为串口2接受发送数据 */
	DMA_InitStructure.DMA_MemoryBaseAddr = (u32)USART2_rx_buf;				/* 内存基地址                      */
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;						/* 传输方向：外设==>>内存          */
	DMA_InitStructure.DMA_BufferSize = USART2_BUF_SIZE;						/* 传输数据大小                    */
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;		/* 不使能外设地址增量模式          */
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;					/* 内存地址为增量模式              */
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte; /* 传输数据宽度：8bit              */
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;			/* 传输数据宽度：8bit              */
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;							/* 工作模式：循环模式              */
	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;							/* 不使能内存到内存拷贝模式        */
	DMA_Init(DMA1_Channel6, &DMA_InitStructure);


	/* Enable USART2 DMA RX request */
	USART_DMACmd(USART2, USART_DMAReq_Rx, ENABLE);
	DMA_Cmd(DMA1_Channel6, ENABLE);
}


/*****************************************************************************
 * 函  数:    USART1_IRQHandler                                                          
 * 功  能:    串口1接收函数                                                                  
 * 输  入:    无                          
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/
void USART1_IRQHandler(void)
{
	u16 num;

#ifdef OS_CRITICAL_METHOD
	OSIntEnter();
#endif	

	/* 产生空闲中断 */
	if(USART_GetITStatus(USART1, USART_IT_IDLE) != RESET)
	{
		/* 先读SR，然后读DR才能清除 */
		num = USART1->SR;		
		num = USART1->DR;	

		/* 关闭DMA,防止处理其间有数据 */
		DMA_Cmd(DMA1_Channel5, DISABLE);								 

		/* 得到真正接收数据个数 */
		num = USART1_BUF_SIZE - DMA_GetCurrDataCounter(DMA1_Channel5); 	
		USART1_rx_buf[num] = '\0';
		/* 正常传输模式需要每次都重新设置接收数据个数 */		
		DMA_SetCurrDataCounter(DMA1_Channel5, USART1_BUF_SIZE);
		/* 将接收到的数据放入消息队列 */
		OSQPost(USART1_MsgQeue, (void * )USART1_rx_buf); 
		/* 开启DMA */
		DMA_Cmd(DMA1_Channel5, ENABLE);
	}

#ifdef OS_CRITICAL_METHOD
	OSIntExit();
#endif		

}


/*****************************************************************************
 * 函  数:    USART2_IRQHandler                                                          
 * 功  能:    串口2接收函数                                                                  
 * 输  入:    无                          
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/
void USART2_IRQHandler(void)
{
	u16 num;

#ifdef OS_CRITICAL_METHOD
	OSIntEnter();
#endif	

	/* 产生空闲中断 */
	if(USART_GetITStatus(USART2, USART_IT_IDLE) != RESET)
	{
		/* 先读SR，然后读DR才能清除 */
		num = USART2->SR;		
		num = USART2->DR;	

		/* 关闭DMA,防止处理其间有数据 */
		DMA_Cmd(DMA1_Channel6, DISABLE);								
		/* 得到真正接收数据个数 */
		num = USART2_BUF_SIZE - DMA_GetCurrDataCounter(DMA1_Channel6);
		USART2_rx_buf[num] = '\0';     					
		/* 重新设置接收数据个数 */
		DMA_SetCurrDataCounter(DMA1_Channel6, USART2_BUF_SIZE);
		/* 将接收到的数据放入消息队列 */
		OSQPost(UART2_MsgQeue, (void * )USART2_rx_buf);
		/* 开启DMA */
		DMA_Cmd(DMA1_Channel6, ENABLE);
	}
#ifdef OS_CRITICAL_METHOD
	OSIntExit();
#endif

}



/*****************************************************************************
 * 函  数:    USART3_IRQHandler                                                          
 * 功  能:    串口3接收函数                                                                  
 * 输  入:    无                          
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/
void USART3_IRQHandler(void)													  
{	
	uint16_t rddata = 0;
	uint8_t  slot_addr;
	uint8_t  msg_data;
	static uint16_t msg_data_num = 0;
	static uint8_t slot_check_ok = 0;

	//#ifdef OS_CRITICAL_METHOD
	//	OSIntEnter();
	//#endif

	if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)				//产生USART3接收中断
	{	
		USART_ClearITPendingBit(USART3, USART_IT_RXNE);

		rddata = USART_ReceiveData(USART3);				        		//读取接收到的数据（清除中断）

		if(gmcp_msg_ready)   return;									//在当前帧处理完前不再接收新数据

		if(rddata & 0x0100)  											//bit8 1:地址位 0:数据 
		{																//address
			slot_addr = (uint8_t)(rddata & 0x00ff);
			if(slot_addr == gmcp_msg.my_slot_addr)
			{
				slot_check_ok  = 1;	  	  								//ready to receive data
				gmcp_msg_check = 0;	 	  								  //clear check flag
				REC_NEXT_STEP = SOC_ADDR;
			}
			else
			{
				slot_check_ok = 0;	      								//not ready to receive data
			}
		}
		else							  								          //data
		{
			msg_data = (uint8_t)(rddata & 0x00ff);
			if(slot_check_ok)			  								   //had already checked slot address
			{
				switch(REC_NEXT_STEP)
				{
					case SOC_ADDR:  
						gmcp_msg.mcp_slot_addr = msg_data;
						REC_NEXT_STEP = LEN_HIGH;
						break;

					case LEN_HIGH: 
						gmcp_msg.msg_len = ((uint16_t)msg_data) << 8 ;
						REC_NEXT_STEP = LEN_LOW;
						break;
					case LEN_LOW:   
						gmcp_msg.msg_len |= (uint16_t)msg_data;
						REC_NEXT_STEP = LEN_LOW;

						if (gmcp_msg.msg_len == CTL_MSG_LEN) 
						{
							REC_NEXT_STEP = MSG_TYPE;
						} 
						else 
						{
							REC_NEXT_STEP = DAT_BODY;
							gmcp_msg.msg_type = DAT;
						}
						break;
					case DAT_BODY:
						gmcp_msg_check ^= msg_data; 
						gmcp_msg.dat_buf[msg_data_num++] = msg_data;
						if (msg_data_num == gmcp_msg.msg_len) 		 //received enough data 
						{
							msg_data_num = 0;
							REC_NEXT_STEP = CHECK_CH;
						}
						break;

					case MSG_TYPE:
						gmcp_msg_check   ^= msg_data;
						gmcp_msg.msg_type = (T_MSG_TYPE)msg_data;
						REC_NEXT_STEP = CHECK_CH;
						break;

					case CHECK_CH:  
						gmcp_msg.check_ch = msg_data;
						REC_NEXT_STEP = END_CH;
						break;
					case END_CH:
						gmcp_msg.end_ch = msg_data;
						gmcp_msg_ready = 1;
						OSSemPost(MCP_Semp);
						slot_check_ok   = 0;						//重新校验地址
						break;
					default:		
						break;

				}
			}
		}		
	}
	//#ifdef OS_CRITICAL_METHOD
	//	OSIntExit();
	//#endif
}


/*****************************************************************************
 * 函  数:    sys_usart1_send                                                          
 * 功  能:    串口1发送函数                                                                  
 * 输  入:    无                          
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/
static void sys_usart1_send(uint8_t *ptr, uint16_t size)
{
	uint16_t i;

	/* 清除发送中断标志,防止第一个字节丢失 */
	USART_ClearFlag(USART1, USART_FLAG_TC);

	for (i = 0; i < size; i++)
	{	
		/* 发送数据 */
		usart_sendData(USART1, (uint16_t)*ptr++);
		/* 等待数据发送发送完成 */
		while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);
	}
}


/*****************************************************************************
 * 函  数:    sys_usart2_send                                                          
 * 功  能:    串口2发送函数                                                                  
 * 输  入:    无                          
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/
static void sys_usart2_send(uint8_t *ptr, uint16_t size)
{
	uint16_t i;

	/* 清除发送中断标志,防止第一个字节丢失 */
	USART_ClearFlag(USART2, USART_FLAG_TC);	

	for (i = 0; i < size; i++)
	{	
		/* 发送数据 */
		usart_sendData(USART2, (uint16_t)*ptr++);
		/* 等待数据发送发送完成 */
		while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
	}

}


/*****************************************************************************
 * 函  数:    sys_usart3_send                                                          
 * 功  能:    串口3发送函数                                                                  
 * 输  入:    无                          
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/
static void sys_usart3_send(uint8_t *ptr, uint16_t size)
{	
	uint16_t i;


	/* 清除发送中断标志,防止第一个字节丢失 */
	USART_ClearFlag(USART3, USART_FLAG_TC);
	usart_sendData(USART3, TX_ADDR((uint16_t)ptr[0]) );
	/* 等待数据发送发送完成 */
	while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);

	for (i = 1; i < size; i++)
	{	
		usart_sendData(USART3, TX_DATA((uint16_t)ptr[i]) );
		/* 等待数据发送发送完成 */
		while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);
	}

}

#endif

/*****************************************************************************
 * 函  数:    sys_usart_init                                                          
 * 功  能:    串口初始化                                                                  
 * 输  入:    无                          
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/
void sys_usart_init(void)
{
#ifdef TODO 
	/* 配置串口时钟、DMA时钟和GPIO时钟 */
	sys_rcc_configuration();

	/* 配置串口1、串口2、串口3的配置GPIO引脚模式 */
	sys_gpio_configuration();

	/* 配置NVIC中断优先级 */
	sys_nvic_configuration();

	/* 配置串口工作参数 */
	sys_usart_configuration();

	/* 配置串口DMA工作参数 */
	sys_dma_configuration();
#endif
}









/*****************************************************************************
 * 函  数:    usart_send                                                           
 * 功  能:    按照串口数据格式发送数据                                                                  
 * 输  入:    *pdata: 要发送的数据
com   : 发送串口号 
 * 输  出:    无                                                    
 * 返回值:    无                                                    
 * 创  建:    2018-07-18 changzehai(DTT)                            
 * 更  新:    无                                       
 ****************************************************************************/ 
void usart_send(u8_t *pdata, u8_t com)
{
	u8_t buf[usart_send_LEN_MAX];    /* 用于存放格式化成串口数据格式的数据 */
	u8_t check = 0;                  /* 校验码                             */
	u8_t len = 0;                    /* 函数输入的字符串长度               */
	u8_t *p = pdata;


	len = strlen((char *)pdata);
	/* 加上"*\r\n"之后的长度超过串口发送最大长度 */
	if ((len + 3) > usart_send_LEN_MAX) 
	{
#ifdef TODO
		MTFS30_ERROR("发送数据过长(len=%d)", len);
		return;
#endif		    
	}

	/* 计算校验码 */
	while(*p)
	{
		check = check ^ (*p);      
		p++;
	}	

	/* 格式化成串口数据格式 */
	sprintf((char *)buf, "%s*%x\r\n", pdata, check);

	/* 判断发送串口号 */
	switch(com)
	{
#ifdef TODO
		case USART_COM_1:    /* 串口1 */
			/* 使用串口1发送命令 */
			sys_usart1_send(buf, strlen((char*)buf));
			break;

		case USART_COM_2:    /* 串口2 */
			/* 使用串口2发送命令 */
			sys_usart2_send(buf, strlen((char*)buf));			
			break;

		case USART_COM_3:    /* 串口3 */
			/* 使用串口3发送命令 */
			sys_usart3_send(buf, strlen((char*)buf));
			break;

#endif
		default:
#ifdef TODO
			MTFS30_ERROR("串口号(%d)有误", com);
#endif		
			break;
	}

}



